{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/location/location.component.css","webpack:///./src/app/location/location.component.html","webpack:///./src/app/location/location.component.ts","webpack:///./src/app/search/search.component.css","webpack:///./src/app/search/search.component.html","webpack:///./src/app/search/search.component.ts","webpack:///./src/app/timeline/timeline.component.css","webpack:///./src/app/timeline/timeline.component.html","webpack:///./src/app/timeline/timeline.component.ts","webpack:///./src/app/twitter.service.ts","webpack:///./src/app/update-status/update-status.component.css","webpack:///./src/app/update-status/update-status.component.html","webpack:///./src/app/update-status/update-status.component.ts","webpack:///./src/app/window/window.component.css","webpack:///./src/app/window/window.component.html","webpack:///./src/app/window/window.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!-- shows the user profile info -->\\r\\n<app-window\\r\\n[user] = \\\"user\\\">\\r\\n</app-window>\\r\\n\\r\\n<ul>\\r\\n    <li *ngFor=\\\"let entry of text\\\">\\r\\n        {{ entry }}\\r\\n    </li>\\r\\n</ul>\"","import { Component, OnInit } from '@angular/core';\r\nimport { TwitterService } from './twitter.service';\r\nimport { Tweet } from './tweet';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  providers: [TwitterService]\r\n})\r\n\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n  title = 'TwitterApp';\r\n  user;\r\n  // t: Tweet = {\r\n  //  id: 1234;\r\n  //   text: 'bllblals';\r\n  // };\r\n  tweets: Tweet[] = [];\r\n  bananaTweet;\r\n  string: string;\r\n  text: string[] = [];\r\n\r\n  constructor(private twitter: TwitterService) {}\r\n\r\n\r\n  ngOnInit() {\r\n  // calls user API and puts the response in user object\r\n  this.twitter.user().subscribe(x => this.user = x.data);\r\n\r\n  // // calls the search API and puts the response into text array string[]\r\n  // this.twitter.search('banana').subscribe(x => {\r\n  //   //prints out the json onto the console\r\n  //   console.log(x.data.statuses.map(e=> e.text));\r\n\r\n  //   //puts x.data into bananaTweet object\r\n  //   this.bananaTweet = x.data;\r\n  //   this.text = this.bananaTweet.statuses.map(e=> e.text);\r\n  // });\r\n\r\n\r\n\r\n\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { WindowComponent } from './window/window.component';\r\nimport { SearchComponent } from './search/search.component';\r\nimport { LocationComponent } from './location/location.component';\r\nimport { TimelineComponent } from './timeline/timeline.component';\r\nimport { UpdateStatusComponent } from './update-status/update-status.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    WindowComponent,\r\n    SearchComponent,\r\n    LocationComponent,\r\n    TimelineComponent,\r\n    UpdateStatusComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<p>\\n  location works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-location',\n  templateUrl: './location.component.html',\n  styleUrls: ['./location.component.css']\n})\nexport class LocationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".tweet{\\r\\n  background-color: skyblue;\\r\\n    width: 80%;\\r\\n    padding: 25px;\\r\\n    border: 10px solid navy;\\r\\n    margin: 50px;\\r\\n\\r\\n}\\r\\n\"","module.exports = \"<label>Search for top 100 Tweets: </label>\\r\\n<input type=\\\"text\\\"\\r\\nclass=\\\"form-control\\\"\\r\\n[(ngModel)]=\\\"input\\\"\\r\\n(input) = \\\"checkString(input)\\\">\\r\\n\\r\\n<p>\\r\\n    {{ input }}\\r\\n</p>\\r\\n\\r\\n<button class=\\\"btn\\\"\\r\\n[disabled]=\\\"stringIsEmpty\\\"\\r\\n(click)=\\\"onSearch()\\\">OK\\r\\n</button>\\r\\n\\r\\n<p [innerText] = statusMessage>\\r\\n    <!-- above line is DATA BINDING, below line is STRING INTERPOLATION -->\\r\\n    {{ statusMessage }}\\r\\n</p>\\r\\n\\r\\n\\r\\n<div class=\\\"tweet\\\" *ngFor=\\\"let entryTweet of listOfTweets\\\">\\r\\n{{entryTweet}}\\r\\n<br>\\r\\n</div>\\r\\n\\r\\n<!-- <ul>\\r\\n  <li *ngFor=\\\"let entryTweet of listOfTweets\\\">\\r\\n      {{ entryTweet }}\\r\\n  </li>\\r\\n</ul> -->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { TwitterService } from '../twitter.service';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.css'],\r\n  providers: [TwitterService]\r\n})\r\nexport class SearchComponent implements OnInit {\r\n\r\n    input: string = '';\r\n    stringIsEmpty: boolean = true;\r\n    statusMessage: string = '';\r\n    searchHistory = [];\r\n\r\n\r\n    tweetEntry;\r\n    listOfTweets: string[] = [];\r\n\r\n    constructor(private twitter: TwitterService) {    }\r\n\r\n\r\n    checkString(input: String){\r\n        if( input !== '' ){\r\n            this.stringIsEmpty = false;\r\n        }\r\n      }\r\n\r\n\r\n    onSearch(){\r\n        this.statusMessage = 'User searched: ' + this.input;\r\n\r\n        this.searchHistory.push(this.input);\r\n\r\n        this.twitter.search(this.input).subscribe(x => {\r\n\r\n        console.log(x.data.statuses.map(e => e.text));\r\n\r\n        // puts x.data into tweetEntry object\r\n        this.tweetEntry = x.data;\r\n\r\n        // pushes each text of tweetEntry object onto listOfTweets string[]\r\n        this.listOfTweets = this.tweetEntry.statuses.map(e=> e.text);\r\n\r\n        // clear the input for next search\r\n        this.input = '';\r\n    });\r\n  }\r\n\r\n\r\n\r\n    ngOnInit(){\r\n\r\n        }\r\n\r\n}\r\n","module.exports = \".tweet{\\r\\n    background-color: skyblue;\\r\\n      width: 80%;\\r\\n      padding: 25px;\\r\\n      border: 10px solid navy;\\r\\n      margin: 50px;\\r\\n  \\r\\n  }\\r\\n\\r\\n.button {\\r\\n    padding: 5px;\\r\\n    \\r\\n}\\r\\n\\r\\nimg:hover {\\r\\n    cursor: pointer;\\r\\n    opacity: 0.7;\\r\\n}\\r\\n  \"","module.exports = \"<div class=\\\"tweet\\\" *ngFor=\\\"let tweetEntry of listOfTweets\\\">\\r\\n  {{tweetEntry.text}}\\r\\n  <br>\\r\\n  <img class=\\\"button\\\" src=\\\"../../assets/heart.png\\\" (click)=\\\"favoriteTweet(tweetEntry)\\\">\\r\\n  <img class=\\\"button\\\" src=\\\"../../assets/retweet.png\\\" (click)=\\\"retweetTweet(tweetEntry)\\\">\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { TwitterService } from '../twitter.service';\r\n\r\n@Component({\r\n  selector: 'app-timeline',\r\n  templateUrl: './timeline.component.html',\r\n  styleUrls: ['./timeline.component.css'],\r\n  providers: [TwitterService]\r\n})\r\nexport class TimelineComponent implements OnInit {\r\n\r\n  listOfTweets: Object[] = [];\r\n\r\n  selectedItem: Object;\r\n\r\n  since = '';\r\n\r\n  constructor(private twitter: TwitterService) { }\r\n\r\n  ngOnInit() {\r\n    this.twitter.home(this.since).subscribe(tweetResponse => {\r\n      var timeLineTweets = tweetResponse.data;\r\n      this.listOfTweets = timeLineTweets.map(tweetEntry =>\r\n        ({\"id\": tweetEntry.id_str,\r\n        \"text\": tweetEntry.full_text,\r\n        \"favorited\": false,\r\n        \"retweeted\": false}));\r\n\r\n      console.log(this.listOfTweets);\r\n    });\r\n    //this.since = this.listOfTweets[0].id;\r\n  }\r\n\r\n  favoriteTweet(input) {\r\n    input.favorited = !input.favorited;\r\n\r\n    console.log(\"favoriteTweet method called on id \" + input.id);\r\n    this.twitter.action('favorite', input.id, input.favorited)\r\n    .subscribe(tweetResponse => console.log(tweetResponse));\r\n  }\r\n\r\n  retweetTweet(tweetEntry) {\r\n    tweetEntry.retweeted = !tweetEntry.retweeted;\r\n\r\n    console.log(tweetEntry.retweeted + \"| retweetTweet method called id \" + tweetEntry.id);\r\n    this.twitter.action('retweet', tweetEntry.id, tweetEntry.retweeted)\r\n    .subscribe(tweetResponse => console.log(tweetResponse));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../environments/environment';\r\n\r\nexport interface TwitterResponse {\r\n  data: any;\r\n  resp: any;\r\n}\r\n\r\n@Injectable()\r\n\r\nexport class TwitterService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // create httpClient with user() that returns an observable\r\n  // this method returns an observable which can be subscribed to (refer to app.component.ts)\r\n  user() {\r\n  return this.http.get<TwitterResponse>(`${environment.api}/user`);\r\n  }\r\n\r\n  home(since?: string) {\r\n  return this.http.get<TwitterResponse>(`${environment.api}/home?since=${since}`);\r\n  }\r\n\r\n  action(property: 'favorite'|'retweet', id: string, state: boolean) {\r\n  return this.http.post<TwitterResponse>(`${environment.api}/${property}/${id}`, {state});\r\n  }\r\n\r\n  updateStatus(status?: string){\r\n    return this.http.post<TwitterResponse>(`${environment.api}/statuses/update?status=${status}`, {status});\r\n  }\r\n\r\n  search(q?: string) {\r\n  return this.http.get<TwitterResponse>(`${environment.api}/search?q=${q}`);\r\n  }\r\n\r\n  }\r\n","module.exports = \"\"","module.exports = \"<label>Post a new Tweet: </label>\\r\\n<input type=\\\"text\\\"\\r\\nclass=\\\"form-control\\\"\\r\\n[(ngModel)]=\\\"input\\\"\\r\\n(input) = \\\"checkString(input)\\\">\\r\\n\\r\\n<p>\\r\\n    {{ input }}\\r\\n</p>\\r\\n\\r\\n<button class=\\\"btn\\\"\\r\\n[disabled]=\\\"stringIsEmpty\\\"\\r\\n(click)=\\\"updateStatus()\\\">OK\\r\\n</button>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { TwitterService } from '../twitter.service';\r\n\r\n@Component({\r\n  selector: 'app-update-status',\r\n  templateUrl: './update-status.component.html',\r\n  styleUrls: ['./update-status.component.css']\r\n})\r\nexport class UpdateStatusComponent implements OnInit {\r\n\r\n  input: string = '';\r\n  stringIsEmpty: boolean = true;\r\n\r\n  constructor(private twitter: TwitterService) { }\r\n\r\n  checkString(input: String){\r\n      if( input !== '' ){\r\n          this.stringIsEmpty = false;\r\n      }\r\n    }\r\n\r\n    updateStatus(){\r\n\r\n        this.twitter.updateStatus(this.input).subscribe();\r\n\r\n        // clear the input for next search\r\n        this.input = '';\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".window {\\r\\n  width: 60%;\\r\\n  height: 80%;\\r\\n  border: 3px skyblue solid;\\r\\n  padding: 5%;\\r\\n  margin: 20%, 10%;\\r\\n\\r\\n}\\r\\n\"","module.exports = \"\\r\\n\\r\\n  <!-- User Profile Box -->\\r\\n  <app-update-status></app-update-status>\\r\\n  <div class = \\\"window\\\" *ngIf=\\\"user\\\">\\r\\n    User: @ {{user.screen_name}}\\r\\n    <br>\\r\\n    Name: {{user.name}}\\r\\n    <br>\\r\\n    Location: {{ user.location }}\\r\\n    <br>\\r\\n    Description: {{user.description}}\\r\\n    <br>\\r\\n    <app-timeline></app-timeline>\\r\\n  </div>\\r\\n\\r\\n  <!-- Search Box -->\\r\\n  <div class = \\\"window\\\">\\r\\n     <app-search>\\r\\n     </app-search>\\r\\n  </div>\\r\\n\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-window',\n  templateUrl: './window.component.html',\n  styleUrls: ['./window.component.css']\n})\nexport class WindowComponent implements OnInit {\n\n  @Input() user: any;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  api: 'http://localhost:3000/api'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}